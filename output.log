nohup: ignoring input
W1030 02:28:57.493888 140098740651840 torch/distributed/run.py:779] 
W1030 02:28:57.493888 140098740651840 torch/distributed/run.py:779] *****************************************
W1030 02:28:57.493888 140098740651840 torch/distributed/run.py:779] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
W1030 02:28:57.493888 140098740651840 torch/distributed/run.py:779] *****************************************
Loading checkpoint shards:   0%|          | 0/8 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/8 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/8 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/8 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/8 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/8 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/8 [00:00<?, ?it/s]Loading checkpoint shards:  12%|█▎        | 1/8 [00:01<00:12,  1.80s/it]Loading checkpoint shards:  12%|█▎        | 1/8 [00:01<00:12,  1.79s/it]Loading checkpoint shards:  12%|█▎        | 1/8 [00:01<00:13,  1.87s/it]Loading checkpoint shards:  12%|█▎        | 1/8 [00:01<00:12,  1.80s/it]Loading checkpoint shards:  12%|█▎        | 1/8 [00:01<00:12,  1.80s/it]Loading checkpoint shards:  12%|█▎        | 1/8 [00:01<00:13,  1.87s/it]Loading checkpoint shards:  12%|█▎        | 1/8 [00:01<00:13,  1.89s/it]Loading checkpoint shards:  25%|██▌       | 2/8 [00:03<00:10,  1.74s/it]Loading checkpoint shards:  25%|██▌       | 2/8 [00:03<00:10,  1.73s/it]Loading checkpoint shards:  25%|██▌       | 2/8 [00:03<00:10,  1.74s/it]Loading checkpoint shards:  25%|██▌       | 2/8 [00:03<00:10,  1.73s/it]Loading checkpoint shards:  25%|██▌       | 2/8 [00:03<00:10,  1.80s/it]Loading checkpoint shards:  25%|██▌       | 2/8 [00:03<00:10,  1.80s/it]Loading checkpoint shards:  25%|██▌       | 2/8 [00:03<00:10,  1.82s/it]Loading checkpoint shards:  38%|███▊      | 3/8 [00:05<00:08,  1.68s/it]Loading checkpoint shards:  38%|███▊      | 3/8 [00:05<00:08,  1.67s/it]Loading checkpoint shards:  38%|███▊      | 3/8 [00:05<00:08,  1.67s/it]Loading checkpoint shards:  38%|███▊      | 3/8 [00:05<00:08,  1.66s/it]Loading checkpoint shards:  38%|███▊      | 3/8 [00:05<00:08,  1.74s/it]Loading checkpoint shards:  38%|███▊      | 3/8 [00:05<00:08,  1.74s/it]Loading checkpoint shards:  38%|███▊      | 3/8 [00:05<00:08,  1.77s/it]Loading checkpoint shards:  50%|█████     | 4/8 [00:06<00:06,  1.65s/it]Loading checkpoint shards:  50%|█████     | 4/8 [00:06<00:06,  1.64s/it]Loading checkpoint shards:  50%|█████     | 4/8 [00:06<00:06,  1.64s/it]Loading checkpoint shards:  50%|█████     | 4/8 [00:06<00:06,  1.63s/it]Loading checkpoint shards:  50%|█████     | 4/8 [00:06<00:06,  1.71s/it]Loading checkpoint shards:  50%|█████     | 4/8 [00:06<00:06,  1.70s/it]Loading checkpoint shards:  50%|█████     | 4/8 [00:07<00:06,  1.72s/it]Loading checkpoint shards:  62%|██████▎   | 5/8 [00:08<00:04,  1.61s/it]Loading checkpoint shards:  62%|██████▎   | 5/8 [00:08<00:04,  1.63s/it]Loading checkpoint shards:  62%|██████▎   | 5/8 [00:08<00:04,  1.61s/it]Loading checkpoint shards:  62%|██████▎   | 5/8 [00:08<00:04,  1.61s/it]Loading checkpoint shards:  62%|██████▎   | 5/8 [00:08<00:05,  1.68s/it]Loading checkpoint shards:  62%|██████▎   | 5/8 [00:08<00:05,  1.68s/it]Loading checkpoint shards:  62%|██████▎   | 5/8 [00:08<00:05,  1.69s/it]Loading checkpoint shards:  75%|███████▌  | 6/8 [00:09<00:03,  1.57s/it]Loading checkpoint shards:  75%|███████▌  | 6/8 [00:09<00:03,  1.59s/it]Loading checkpoint shards:  75%|███████▌  | 6/8 [00:09<00:03,  1.57s/it]Loading checkpoint shards:  75%|███████▌  | 6/8 [00:09<00:03,  1.58s/it]Loading checkpoint shards:  75%|███████▌  | 6/8 [00:10<00:03,  1.65s/it]Loading checkpoint shards:  75%|███████▌  | 6/8 [00:10<00:03,  1.63s/it]Loading checkpoint shards:  75%|███████▌  | 6/8 [00:10<00:03,  1.64s/it]Loading checkpoint shards:  88%|████████▊ | 7/8 [00:11<00:01,  1.53s/it]Loading checkpoint shards:  88%|████████▊ | 7/8 [00:11<00:01,  1.54s/it]Loading checkpoint shards:  88%|████████▊ | 7/8 [00:11<00:01,  1.54s/it]Loading checkpoint shards:  88%|████████▊ | 7/8 [00:11<00:01,  1.54s/it]Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.15s/it]Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.44s/it]
Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.16s/it]Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.45s/it]
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/transformers/training_args.py:1559: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.14s/it]Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.44s/it]
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/transformers/training_args.py:1559: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
Loading checkpoint shards:  88%|████████▊ | 7/8 [00:11<00:01,  1.58s/it]Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.15s/it]Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.44s/it]
Loading checkpoint shards:  88%|████████▊ | 7/8 [00:11<00:01,  1.57s/it]/root/anaconda3/envs/meditron/lib/python3.9/site-packages/transformers/training_args.py:1559: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
Loading checkpoint shards:  88%|████████▊ | 7/8 [00:11<00:01,  1.57s/it]Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.18s/it]Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.49s/it]
Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.17s/it]Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.48s/it]
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/transformers/training_args.py:1559: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/transformers/training_args.py:1559: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.17s/it]Loading checkpoint shards: 100%|██████████| 8/8 [00:11<00:00,  1.49s/it]
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/transformers/training_args.py:1559: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/transformers/training_args.py:1559: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
/mnt/dg_tunning/tune_combined.py:128: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
/mnt/dg_tunning/tune_combined.py:128: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
/mnt/dg_tunning/tune_combined.py:128: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
/mnt/dg_tunning/tune_combined.py:128: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
/mnt/dg_tunning/tune_combined.py:128: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
Detected kernel version 5.4.0, which is below the recommended minimum of 5.5.0; this can cause the process to hang. It is recommended to upgrade the kernel to the minimum version or higher.
/mnt/dg_tunning/tune_combined.py:128: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
/mnt/dg_tunning/tune_combined.py:128: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.
  trainer = Trainer(
wandb: WARNING The `run_name` is currently set to the same value as `TrainingArguments.output_dir`. If this was not intended, please specify a different run name by setting the `TrainingArguments.run_name` parameter.
wandb: Using wandb-core as the SDK backend. Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: l-zijie. Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.5
wandb: Run data is saved locally in /mnt/dg_tunning/wandb/run-20241030_022934-l75rtry9
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run ./meditron_qa_results
wandb: ⭐️ View project at https://wandb.ai/l-zijie/huggingface
wandb: 🚀 View run at https://wandb.ai/l-zijie/huggingface/runs/l75rtry9
  0%|          | 0/162 [00:00<?, ?it/s]  1%|          | 1/162 [00:36<1:38:28, 36.70s/it]  1%|          | 2/162 [01:13<1:38:14, 36.84s/it]  2%|▏         | 3/162 [01:50<1:37:23, 36.75s/it]  2%|▏         | 4/162 [02:26<1:36:34, 36.67s/it]  3%|▎         | 5/162 [03:03<1:35:54, 36.66s/it]  4%|▎         | 6/162 [03:40<1:35:13, 36.63s/it]  4%|▍         | 7/162 [04:16<1:34:38, 36.63s/it]  5%|▍         | 8/162 [04:53<1:34:02, 36.64s/it]  6%|▌         | 9/162 [05:30<1:33:27, 36.65s/it]  6%|▌         | 10/162 [06:06<1:32:44, 36.61s/it]  7%|▋         | 11/162 [06:43<1:32:04, 36.59s/it]  7%|▋         | 12/162 [07:19<1:31:29, 36.60s/it]  8%|▊         | 13/162 [07:56<1:30:49, 36.57s/it]  9%|▊         | 14/162 [08:32<1:30:16, 36.60s/it]  9%|▉         | 15/162 [09:09<1:29:43, 36.62s/it] 10%|▉         | 16/162 [09:46<1:29:02, 36.59s/it] 10%|█         | 17/162 [10:22<1:28:23, 36.57s/it] 11%|█         | 18/162 [10:59<1:27:48, 36.58s/it] 12%|█▏        | 19/162 [11:35<1:27:14, 36.60s/it] 12%|█▏        | 20/162 [12:12<1:26:32, 36.56s/it] 13%|█▎        | 21/162 [12:48<1:25:55, 36.56s/it] 14%|█▎        | 22/162 [13:25<1:25:15, 36.54s/it] 14%|█▍        | 23/162 [14:01<1:24:40, 36.55s/it] 15%|█▍        | 24/162 [14:38<1:24:09, 36.59s/it] 15%|█▌        | 25/162 [15:15<1:23:34, 36.60s/it] 16%|█▌        | 26/162 [15:51<1:22:52, 36.56s/it] 17%|█▋        | 27/162 [16:28<1:22:18, 36.58s/it] 17%|█▋        | 28/162 [17:04<1:21:38, 36.56s/it] 18%|█▊        | 29/162 [17:41<1:21:06, 36.59s/it] 19%|█▊        | 30/162 [18:18<1:20:35, 36.63s/it] 19%|█▉        | 31/162 [18:54<1:19:59, 36.64s/it] 20%|█▉        | 32/162 [19:31<1:19:16, 36.59s/it] 20%|██        | 33/162 [20:08<1:18:42, 36.61s/it] 21%|██        | 34/162 [20:44<1:18:06, 36.61s/it] 22%|██▏       | 35/162 [21:21<1:17:33, 36.65s/it] 22%|██▏       | 36/162 [21:57<1:16:55, 36.63s/it] 23%|██▎       | 37/162 [22:34<1:16:21, 36.65s/it] 23%|██▎       | 38/162 [23:11<1:15:44, 36.65s/it] 24%|██▍       | 39/162 [23:48<1:15:15, 36.72s/it] 25%|██▍       | 40/162 [24:24<1:14:42, 36.74s/it] 25%|██▌       | 41/162 [25:01<1:14:04, 36.73s/it] 26%|██▌       | 42/162 [25:38<1:13:22, 36.69s/it] 27%|██▋       | 43/162 [26:14<1:12:46, 36.69s/it] 27%|██▋       | 44/162 [26:51<1:12:03, 36.64s/it] 28%|██▊       | 45/162 [27:28<1:11:28, 36.66s/it] 28%|██▊       | 46/162 [28:04<1:10:49, 36.63s/it] 29%|██▉       | 47/162 [28:41<1:10:13, 36.64s/it] 30%|██▉       | 48/162 [29:18<1:09:38, 36.65s/it] 30%|███       | 49/162 [29:54<1:09:04, 36.68s/it] 31%|███       | 50/162 [30:31<1:08:31, 36.71s/it] 31%|███▏      | 51/162 [31:08<1:07:49, 36.67s/it] 32%|███▏      | 52/162 [31:44<1:07:12, 36.66s/it] 33%|███▎      | 53/162 [32:21<1:06:29, 36.60s/it] 33%|███▎      | 54/162 [32:57<1:05:53, 36.61s/it]
  0%|          | 0/108 [00:00<?, ?it/s][A
  2%|▏         | 2/108 [00:03<02:53,  1.64s/it][A
  3%|▎         | 3/108 [00:06<04:03,  2.32s/it][A
  4%|▎         | 4/108 [00:09<04:38,  2.67s/it][A
  5%|▍         | 5/108 [00:13<04:55,  2.87s/it][A
  6%|▌         | 6/108 [00:16<05:05,  3.00s/it][A
  6%|▋         | 7/108 [00:19<05:11,  3.09s/it][A
  7%|▋         | 8/108 [00:22<05:15,  3.15s/it][A
  8%|▊         | 9/108 [00:26<05:15,  3.19s/it][A
  9%|▉         | 10/108 [00:29<05:14,  3.21s/it][A
 10%|█         | 11/108 [00:32<05:13,  3.23s/it][A
 11%|█         | 12/108 [00:35<05:10,  3.23s/it][A
 12%|█▏        | 13/108 [00:39<05:08,  3.24s/it][A
 13%|█▎        | 14/108 [00:42<05:05,  3.25s/it][A
 14%|█▍        | 15/108 [00:45<05:03,  3.26s/it][A
 15%|█▍        | 16/108 [00:48<04:59,  3.26s/it][A
 16%|█▌        | 17/108 [00:52<04:56,  3.26s/it][A
 17%|█▋        | 18/108 [00:55<04:54,  3.28s/it][A
 18%|█▊        | 19/108 [00:58<04:51,  3.27s/it][A
 19%|█▊        | 20/108 [01:02<04:47,  3.27s/it][A
 19%|█▉        | 21/108 [01:05<04:43,  3.26s/it][A
 20%|██        | 22/108 [01:08<04:38,  3.24s/it][A
 21%|██▏       | 23/108 [01:11<04:36,  3.26s/it][A
 22%|██▏       | 24/108 [01:15<04:33,  3.25s/it][A
 23%|██▎       | 25/108 [01:18<04:30,  3.26s/it][A
 24%|██▍       | 26/108 [01:21<04:27,  3.26s/it][A
 25%|██▌       | 27/108 [01:24<04:24,  3.26s/it][A
 26%|██▌       | 28/108 [01:28<04:21,  3.27s/it][A
 27%|██▋       | 29/108 [01:31<04:17,  3.26s/it][A
 28%|██▊       | 30/108 [01:34<04:14,  3.26s/it][A
 29%|██▊       | 31/108 [01:37<04:11,  3.26s/it][A
 30%|██▉       | 32/108 [01:41<04:08,  3.26s/it][A
 31%|███       | 33/108 [01:44<04:05,  3.27s/it][A
 31%|███▏      | 34/108 [01:47<04:01,  3.26s/it][A
 32%|███▏      | 35/108 [01:50<03:58,  3.26s/it][A
 33%|███▎      | 36/108 [01:54<03:54,  3.26s/it][A
 34%|███▍      | 37/108 [01:57<03:50,  3.25s/it][A
 35%|███▌      | 38/108 [02:00<03:47,  3.25s/it][A
 36%|███▌      | 39/108 [02:03<03:44,  3.26s/it][A
 37%|███▋      | 40/108 [02:07<03:41,  3.26s/it][A
 38%|███▊      | 41/108 [02:10<03:38,  3.26s/it][A
 39%|███▉      | 42/108 [02:13<03:34,  3.26s/it][A
 40%|███▉      | 43/108 [02:16<03:31,  3.25s/it][A
 41%|████      | 44/108 [02:20<03:28,  3.25s/it][A
 42%|████▏     | 45/108 [02:23<03:24,  3.24s/it][A
 43%|████▎     | 46/108 [02:26<03:20,  3.24s/it][A
 44%|████▎     | 47/108 [02:29<03:17,  3.24s/it][A
 44%|████▍     | 48/108 [02:33<03:14,  3.24s/it][A
 45%|████▌     | 49/108 [02:36<03:11,  3.25s/it][A
 46%|████▋     | 50/108 [02:39<03:09,  3.27s/it][A
 47%|████▋     | 51/108 [02:43<03:05,  3.26s/it][A
 48%|████▊     | 52/108 [02:46<03:02,  3.26s/it][A
 49%|████▉     | 53/108 [02:49<02:59,  3.26s/it][A
 50%|█████     | 54/108 [02:52<02:56,  3.27s/it][A
 51%|█████     | 55/108 [02:56<02:53,  3.27s/it][A
 52%|█████▏    | 56/108 [02:59<02:49,  3.26s/it][A
 53%|█████▎    | 57/108 [03:02<02:45,  3.25s/it][A
 54%|█████▎    | 58/108 [03:05<02:42,  3.25s/it][A
 55%|█████▍    | 59/108 [03:09<02:39,  3.25s/it][A
 56%|█████▌    | 60/108 [03:12<02:35,  3.24s/it][A
 56%|█████▋    | 61/108 [03:15<02:32,  3.25s/it][A
 57%|█████▋    | 62/108 [03:18<02:29,  3.26s/it][A
 58%|█████▊    | 63/108 [03:22<02:26,  3.26s/it][A
 59%|█████▉    | 64/108 [03:25<02:23,  3.26s/it][A
 60%|██████    | 65/108 [03:28<02:20,  3.26s/it][A
 61%|██████    | 66/108 [03:31<02:17,  3.26s/it][A
 62%|██████▏   | 67/108 [03:35<02:13,  3.26s/it][A
 63%|██████▎   | 68/108 [03:38<02:11,  3.28s/it][A
 64%|██████▍   | 69/108 [03:41<02:07,  3.27s/it][A
 65%|██████▍   | 70/108 [03:44<02:04,  3.27s/it][A
 66%|██████▌   | 71/108 [03:48<02:01,  3.28s/it][A
 67%|██████▋   | 72/108 [03:51<01:57,  3.26s/it][A
 68%|██████▊   | 73/108 [03:54<01:54,  3.27s/it][A
 69%|██████▊   | 74/108 [03:58<01:51,  3.28s/it][A
 69%|██████▉   | 75/108 [04:01<01:48,  3.28s/it][A
 70%|███████   | 76/108 [04:04<01:45,  3.28s/it][A
 71%|███████▏  | 77/108 [04:07<01:41,  3.28s/it][A
 72%|███████▏  | 78/108 [04:11<01:38,  3.27s/it][A
 73%|███████▎  | 79/108 [04:14<01:35,  3.28s/it][A
 74%|███████▍  | 80/108 [04:17<01:31,  3.28s/it][A
 75%|███████▌  | 81/108 [04:21<01:28,  3.28s/it][A
 76%|███████▌  | 82/108 [04:24<01:25,  3.28s/it][A
 77%|███████▋  | 83/108 [04:27<01:21,  3.27s/it][A
 78%|███████▊  | 84/108 [04:30<01:18,  3.28s/it][A
 79%|███████▊  | 85/108 [04:34<01:15,  3.29s/it][A
 80%|███████▉  | 86/108 [04:37<01:12,  3.29s/it][A
 81%|████████  | 87/108 [04:40<01:08,  3.27s/it][A
 81%|████████▏ | 88/108 [04:43<01:05,  3.27s/it][A
 82%|████████▏ | 89/108 [04:47<01:01,  3.26s/it][A
 83%|████████▎ | 90/108 [04:50<00:58,  3.27s/it][A
 84%|████████▍ | 91/108 [04:53<00:55,  3.28s/it][A
 85%|████████▌ | 92/108 [04:57<00:52,  3.28s/it][A
 86%|████████▌ | 93/108 [05:00<00:49,  3.28s/it][A
 87%|████████▋ | 94/108 [05:03<00:45,  3.28s/it][A
 88%|████████▊ | 95/108 [05:06<00:42,  3.28s/it][A
 89%|████████▉ | 96/108 [05:10<00:39,  3.28s/it][A
 90%|████████▉ | 97/108 [05:13<00:36,  3.27s/it][A
 91%|█████████ | 98/108 [05:16<00:32,  3.29s/it][A
 92%|█████████▏| 99/108 [05:20<00:29,  3.27s/it][A
 93%|█████████▎| 100/108 [05:23<00:26,  3.28s/it][A
 94%|█████████▎| 101/108 [05:26<00:22,  3.28s/it][A
 94%|█████████▍| 102/108 [05:29<00:19,  3.28s/it][A
 95%|█████████▌| 103/108 [05:33<00:16,  3.27s/it][A
 96%|█████████▋| 104/108 [05:36<00:13,  3.27s/it][A
 97%|█████████▋| 105/108 [05:39<00:09,  3.26s/it][A
 98%|█████████▊| 106/108 [05:42<00:06,  3.28s/it][A
 99%|█████████▉| 107/108 [05:46<00:03,  3.27s/it][A
100%|██████████| 108/108 [05:49<00:00,  3.27s/it][A                                                  
                                                 [A{'eval_loss': 0.610590398311615, 'eval_runtime': 353.0578, 'eval_samples_per_second': 2.141, 'eval_steps_per_second': 0.306, 'epoch': 1.0}
 33%|███▎      | 54/162 [38:50<1:05:53, 36.61s/it]
100%|██████████| 108/108 [05:49<00:00,  3.27s/it][A
                                                 [A/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
 34%|███▍      | 55/162 [43:04<6:09:57, 207.46s/it] 35%|███▍      | 56/162 [43:40<4:35:57, 156.20s/it] 35%|███▌      | 57/162 [44:17<3:30:28, 120.27s/it] 36%|███▌      | 58/162 [44:53<2:44:48, 95.08s/it]  36%|███▋      | 59/162 [45:29<2:12:57, 77.45s/it] 37%|███▋      | 60/162 [46:06<1:50:47, 65.17s/it] 38%|███▊      | 61/162 [46:42<1:35:13, 56.57s/it] 38%|███▊      | 62/162 [47:19<1:24:12, 50.52s/it] 39%|███▉      | 63/162 [47:55<1:16:22, 46.29s/it] 40%|███▉      | 64/162 [48:31<1:10:45, 43.32s/it] 40%|████      | 65/162 [49:08<1:06:39, 41.23s/it] 41%|████      | 66/162 [49:44<1:03:37, 39.76s/it] 41%|████▏     | 67/162 [50:21<1:01:23, 38.77s/it] 42%|████▏     | 68/162 [50:57<59:37, 38.06s/it]   43%|████▎     | 69/162 [51:33<58:12, 37.55s/it] 43%|████▎     | 70/162 [52:10<57:03, 37.21s/it] 44%|████▍     | 71/162 [52:46<56:04, 36.97s/it] 44%|████▍     | 72/162 [53:23<55:14, 36.83s/it] 45%|████▌     | 73/162 [53:59<54:25, 36.69s/it] 46%|████▌     | 74/162 [54:36<53:44, 36.65s/it] 46%|████▋     | 75/162 [55:12<53:00, 36.56s/it] 47%|████▋     | 76/162 [55:48<52:21, 36.53s/it] 48%|████▊     | 77/162 [56:25<51:41, 36.49s/it] 48%|████▊     | 78/162 [57:01<51:02, 36.45s/it] 49%|████▉     | 79/162 [57:37<50:21, 36.40s/it] 49%|████▉     | 80/162 [58:14<49:43, 36.39s/it] 50%|█████     | 81/162 [58:50<49:06, 36.37s/it] 51%|█████     | 82/162 [59:27<48:30, 36.38s/it] 51%|█████     | 83/162 [1:00:03<47:53, 36.37s/it] 52%|█████▏    | 84/162 [1:00:39<47:14, 36.34s/it] 52%|█████▏    | 85/162 [1:01:15<46:35, 36.31s/it] 53%|█████▎    | 86/162 [1:01:52<46:02, 36.34s/it] 54%|█████▎    | 87/162 [1:02:28<45:27, 36.36s/it] 54%|█████▍    | 88/162 [1:03:05<44:54, 36.41s/it] 55%|█████▍    | 89/162 [1:03:41<44:18, 36.42s/it] 56%|█████▌    | 90/162 [1:04:18<43:42, 36.42s/it] 56%|█████▌    | 91/162 [1:04:54<43:06, 36.43s/it] 57%|█████▋    | 92/162 [1:05:31<42:36, 36.51s/it] 57%|█████▋    | 93/162 [1:06:07<41:57, 36.49s/it] 58%|█████▊    | 94/162 [1:06:44<41:20, 36.47s/it] 59%|█████▊    | 95/162 [1:07:20<40:40, 36.42s/it] 59%|█████▉    | 96/162 [1:07:56<40:04, 36.43s/it] 60%|█████▉    | 97/162 [1:08:33<39:26, 36.41s/it] 60%|██████    | 98/162 [1:09:09<38:53, 36.47s/it] 61%|██████    | 99/162 [1:09:46<38:15, 36.43s/it] 62%|██████▏   | 100/162 [1:10:22<37:38, 36.43s/it]                                                   {'loss': 0.6788, 'grad_norm': 0.7201449275016785, 'learning_rate': 7.74462573818606e-06, 'epoch': 1.85}
 62%|██████▏   | 100/162 [1:10:22<37:38, 36.43s/it] 62%|██████▏   | 101/162 [1:10:58<37:00, 36.40s/it] 63%|██████▎   | 102/162 [1:11:35<36:28, 36.47s/it] 64%|██████▎   | 103/162 [1:12:11<35:50, 36.45s/it] 64%|██████▍   | 104/162 [1:12:48<35:12, 36.43s/it] 65%|██████▍   | 105/162 [1:13:24<34:35, 36.42s/it] 65%|██████▌   | 106/162 [1:14:01<33:58, 36.41s/it] 66%|██████▌   | 107/162 [1:14:37<33:22, 36.41s/it] 67%|██████▋   | 108/162 [1:15:13<32:46, 36.41s/it]
  0%|          | 0/108 [00:00<?, ?it/s][A
  2%|▏         | 2/108 [00:03<02:52,  1.63s/it][A
  3%|▎         | 3/108 [00:06<04:03,  2.31s/it][A
  4%|▎         | 4/108 [00:09<04:37,  2.67s/it][A
  5%|▍         | 5/108 [00:13<04:55,  2.87s/it][A
  6%|▌         | 6/108 [00:16<05:06,  3.01s/it][A
  6%|▋         | 7/108 [00:19<05:13,  3.10s/it][A
  7%|▋         | 8/108 [00:22<05:15,  3.15s/it][A
  8%|▊         | 9/108 [00:26<05:15,  3.19s/it][A
  9%|▉         | 10/108 [00:29<05:14,  3.21s/it][A
 10%|█         | 11/108 [00:32<05:13,  3.23s/it][A
 11%|█         | 12/108 [00:35<05:11,  3.24s/it][A
 12%|█▏        | 13/108 [00:39<05:09,  3.25s/it][A
 13%|█▎        | 14/108 [00:42<05:06,  3.26s/it][A
 14%|█▍        | 15/108 [00:45<05:04,  3.27s/it][A
 15%|█▍        | 16/108 [00:49<05:01,  3.28s/it][A
 16%|█▌        | 17/108 [00:52<04:58,  3.28s/it][A
 17%|█▋        | 18/108 [00:55<04:55,  3.28s/it][A
 18%|█▊        | 19/108 [00:58<04:53,  3.29s/it][A
 19%|█▊        | 20/108 [01:02<04:48,  3.28s/it][A
 19%|█▉        | 21/108 [01:05<04:44,  3.27s/it][A
 20%|██        | 22/108 [01:08<04:41,  3.27s/it][A
 21%|██▏       | 23/108 [01:12<04:38,  3.28s/it][A
 22%|██▏       | 24/108 [01:15<04:35,  3.28s/it][A
 23%|██▎       | 25/108 [01:18<04:32,  3.28s/it][A
 24%|██▍       | 26/108 [01:21<04:28,  3.28s/it][A
 25%|██▌       | 27/108 [01:25<04:25,  3.28s/it][A
 26%|██▌       | 28/108 [01:28<04:21,  3.27s/it][A
 27%|██▋       | 29/108 [01:31<04:19,  3.29s/it][A
 28%|██▊       | 30/108 [01:35<04:15,  3.28s/it][A
 29%|██▊       | 31/108 [01:38<04:12,  3.28s/it][A
 30%|██▉       | 32/108 [01:41<04:08,  3.27s/it][A
 31%|███       | 33/108 [01:44<04:05,  3.27s/it][A
 31%|███▏      | 34/108 [01:48<04:02,  3.27s/it][A
 32%|███▏      | 35/108 [01:51<03:59,  3.28s/it][A
 33%|███▎      | 36/108 [01:54<03:55,  3.27s/it][A
 34%|███▍      | 37/108 [01:57<03:52,  3.28s/it][A
 35%|███▌      | 38/108 [02:01<03:48,  3.27s/it][A
 36%|███▌      | 39/108 [02:04<03:45,  3.27s/it][A
 37%|███▋      | 40/108 [02:07<03:42,  3.28s/it][A
 38%|███▊      | 41/108 [02:11<03:39,  3.27s/it][A
 39%|███▉      | 42/108 [02:14<03:35,  3.27s/it][A
 40%|███▉      | 43/108 [02:17<03:33,  3.28s/it][A
 41%|████      | 44/108 [02:20<03:29,  3.28s/it][A
 42%|████▏     | 45/108 [02:24<03:25,  3.27s/it][A
 43%|████▎     | 46/108 [02:27<03:22,  3.27s/it][A
 44%|████▎     | 47/108 [02:30<03:20,  3.28s/it][A
 44%|████▍     | 48/108 [02:33<03:17,  3.29s/it][A
 45%|████▌     | 49/108 [02:37<03:13,  3.28s/it][A
 46%|████▋     | 50/108 [02:40<03:08,  3.26s/it][A
 47%|████▋     | 51/108 [02:43<03:05,  3.26s/it][A
 48%|████▊     | 52/108 [02:46<03:02,  3.26s/it][A
 49%|████▉     | 53/108 [02:50<02:59,  3.27s/it][A
 50%|█████     | 54/108 [02:53<02:56,  3.27s/it][A
 51%|█████     | 55/108 [02:56<02:53,  3.28s/it][A
 52%|█████▏    | 56/108 [03:00<02:50,  3.28s/it][A
 53%|█████▎    | 57/108 [03:03<02:47,  3.29s/it][A
 54%|█████▎    | 58/108 [03:06<02:44,  3.29s/it][A
 55%|█████▍    | 59/108 [03:09<02:40,  3.29s/it][A
 56%|█████▌    | 60/108 [03:13<02:37,  3.28s/it][A
 56%|█████▋    | 61/108 [03:16<02:34,  3.28s/it][A
 57%|█████▋    | 62/108 [03:19<02:31,  3.28s/it][A
 58%|█████▊    | 63/108 [03:23<02:27,  3.29s/it][A
 59%|█████▉    | 64/108 [03:26<02:24,  3.28s/it][A
 60%|██████    | 65/108 [03:29<02:21,  3.28s/it][A
 61%|██████    | 66/108 [03:32<02:17,  3.27s/it][A
 62%|██████▏   | 67/108 [03:36<02:14,  3.27s/it][A
 63%|██████▎   | 68/108 [03:39<02:10,  3.27s/it][A
 64%|██████▍   | 69/108 [03:42<02:07,  3.27s/it][A
 65%|██████▍   | 70/108 [03:46<02:04,  3.28s/it][A
 66%|██████▌   | 71/108 [03:49<02:01,  3.27s/it][A
 67%|██████▋   | 72/108 [03:52<01:58,  3.29s/it][A
 68%|██████▊   | 73/108 [03:55<01:54,  3.27s/it][A
 69%|██████▊   | 74/108 [03:59<01:51,  3.27s/it][A
 69%|██████▉   | 75/108 [04:02<01:48,  3.27s/it][A
 70%|███████   | 76/108 [04:05<01:44,  3.26s/it][A
 71%|███████▏  | 77/108 [04:08<01:41,  3.27s/it][A
 72%|███████▏  | 78/108 [04:12<01:38,  3.27s/it][A
 73%|███████▎  | 79/108 [04:15<01:35,  3.28s/it][A
 74%|███████▍  | 80/108 [04:18<01:31,  3.28s/it][A
 75%|███████▌  | 81/108 [04:22<01:28,  3.27s/it][A
 76%|███████▌  | 82/108 [04:25<01:25,  3.28s/it][A
 77%|███████▋  | 83/108 [04:28<01:21,  3.27s/it][A
 78%|███████▊  | 84/108 [04:31<01:18,  3.28s/it][A
 79%|███████▊  | 85/108 [04:35<01:15,  3.28s/it][A
 80%|███████▉  | 86/108 [04:38<01:12,  3.28s/it][A
 81%|████████  | 87/108 [04:41<01:08,  3.27s/it][A
 81%|████████▏ | 88/108 [04:44<01:05,  3.27s/it][A
 82%|████████▏ | 89/108 [04:48<01:02,  3.27s/it][A
 83%|████████▎ | 90/108 [04:51<00:59,  3.28s/it][A
 84%|████████▍ | 91/108 [04:54<00:55,  3.28s/it][A
 85%|████████▌ | 92/108 [04:58<00:52,  3.28s/it][A
 86%|████████▌ | 93/108 [05:01<00:49,  3.27s/it][A
 87%|████████▋ | 94/108 [05:04<00:45,  3.27s/it][A
 88%|████████▊ | 95/108 [05:07<00:42,  3.27s/it][A
 89%|████████▉ | 96/108 [05:11<00:39,  3.28s/it][A
 90%|████████▉ | 97/108 [05:14<00:36,  3.27s/it][A
 91%|█████████ | 98/108 [05:17<00:32,  3.29s/it][A
 92%|█████████▏| 99/108 [05:21<00:29,  3.28s/it][A
 93%|█████████▎| 100/108 [05:24<00:26,  3.28s/it][A
 94%|█████████▎| 101/108 [05:27<00:22,  3.27s/it][A
 94%|█████████▍| 102/108 [05:30<00:19,  3.28s/it][A
 95%|█████████▌| 103/108 [05:34<00:16,  3.26s/it][A
 96%|█████████▋| 104/108 [05:37<00:13,  3.27s/it][A
 97%|█████████▋| 105/108 [05:40<00:09,  3.27s/it][A
 98%|█████████▊| 106/108 [05:43<00:06,  3.27s/it][A
 99%|█████████▉| 107/108 [05:47<00:03,  3.26s/it][A
100%|██████████| 108/108 [05:50<00:00,  3.27s/it][A                                                   
                                                 [A{'eval_loss': 0.6128783226013184, 'eval_runtime': 353.9477, 'eval_samples_per_second': 2.136, 'eval_steps_per_second': 0.305, 'epoch': 2.0}
 67%|██████▋   | 108/162 [1:21:07<32:46, 36.41s/it]
100%|██████████| 108/108 [05:50<00:00,  3.27s/it][A
                                                 [A/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
 67%|██████▋   | 109/162 [1:25:46<3:10:13, 215.34s/it] 68%|██████▊   | 110/162 [1:26:23<2:20:08, 161.70s/it] 69%|██████▊   | 111/162 [1:26:59<1:45:29, 124.10s/it] 69%|██████▉   | 112/162 [1:27:36<1:21:33, 97.86s/it]  70%|██████▉   | 113/162 [1:28:12<1:04:52, 79.44s/it] 70%|███████   | 114/162 [1:28:49<53:14, 66.56s/it]   71%|███████   | 115/162 [1:29:25<45:03, 57.52s/it] 72%|███████▏  | 116/162 [1:30:02<39:15, 51.21s/it] 72%|███████▏  | 117/162 [1:30:38<35:03, 46.75s/it] 73%|███████▎  | 118/162 [1:31:15<32:02, 43.69s/it] 73%|███████▎  | 119/162 [1:31:51<29:43, 41.47s/it] 74%|███████▍  | 120/162 [1:32:27<27:57, 39.95s/it] 75%|███████▍  | 121/162 [1:33:04<26:34, 38.88s/it] 75%|███████▌  | 122/162 [1:33:40<25:27, 38.18s/it] 76%|███████▌  | 123/162 [1:34:17<24:29, 37.67s/it] 77%|███████▋  | 124/162 [1:34:53<23:37, 37.31s/it] 77%|███████▋  | 125/162 [1:35:30<22:50, 37.03s/it] 78%|███████▊  | 126/162 [1:36:06<22:06, 36.86s/it] 78%|███████▊  | 127/162 [1:36:42<21:25, 36.72s/it] 79%|███████▉  | 128/162 [1:37:19<20:46, 36.66s/it] 80%|███████▉  | 129/162 [1:37:55<20:08, 36.63s/it] 80%|████████  | 130/162 [1:38:32<19:30, 36.58s/it] 81%|████████  | 131/162 [1:39:08<18:52, 36.54s/it] 81%|████████▏ | 132/162 [1:39:45<18:15, 36.53s/it] 82%|████████▏ | 133/162 [1:40:21<17:39, 36.54s/it] 83%|████████▎ | 134/162 [1:40:58<17:02, 36.53s/it] 83%|████████▎ | 135/162 [1:41:34<16:26, 36.53s/it] 84%|████████▍ | 136/162 [1:42:11<15:49, 36.52s/it] 85%|████████▍ | 137/162 [1:42:48<15:13, 36.54s/it] 85%|████████▌ | 138/162 [1:43:24<14:36, 36.53s/it] 86%|████████▌ | 139/162 [1:44:01<14:00, 36.53s/it] 86%|████████▋ | 140/162 [1:44:37<13:23, 36.53s/it] 87%|████████▋ | 141/162 [1:45:14<12:47, 36.54s/it] 88%|████████▊ | 142/162 [1:45:50<12:11, 36.55s/it] 88%|████████▊ | 143/162 [1:46:27<11:35, 36.63s/it] 89%|████████▉ | 144/162 [1:47:04<10:59, 36.62s/it] 90%|████████▉ | 145/162 [1:47:40<10:22, 36.63s/it] 90%|█████████ | 146/162 [1:48:17<09:46, 36.63s/it] 91%|█████████ | 147/162 [1:48:54<09:10, 36.67s/it] 91%|█████████▏| 148/162 [1:49:30<08:33, 36.68s/it] 92%|█████████▏| 149/162 [1:50:07<07:57, 36.69s/it] 93%|█████████▎| 150/162 [1:50:44<07:19, 36.66s/it] 93%|█████████▎| 151/162 [1:51:20<06:43, 36.64s/it] 94%|█████████▍| 152/162 [1:51:57<06:06, 36.60s/it] 94%|█████████▍| 153/162 [1:52:34<05:29, 36.62s/it] 95%|█████████▌| 154/162 [1:53:10<04:52, 36.61s/it] 96%|█████████▌| 155/162 [1:53:47<04:16, 36.59s/it] 96%|█████████▋| 156/162 [1:54:23<03:39, 36.58s/it] 97%|█████████▋| 157/162 [1:55:00<03:02, 36.57s/it] 98%|█████████▊| 158/162 [1:55:36<02:26, 36.55s/it] 98%|█████████▊| 159/162 [1:56:13<01:49, 36.57s/it] 99%|█████████▉| 160/162 [1:56:49<01:13, 36.57s/it] 99%|█████████▉| 161/162 [1:57:26<00:36, 36.55s/it]100%|██████████| 162/162 [1:58:03<00:00, 36.57s/it]/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))

  0%|          | 0/108 [00:00<?, ?it/s][A
  2%|▏         | 2/108 [00:03<02:50,  1.61s/it][A
  3%|▎         | 3/108 [00:06<04:01,  2.30s/it][A
  4%|▎         | 4/108 [00:09<04:37,  2.67s/it][A
  5%|▍         | 5/108 [00:13<04:55,  2.87s/it][A
  6%|▌         | 6/108 [00:16<05:07,  3.02s/it][A
  6%|▋         | 7/108 [00:19<05:12,  3.09s/it][A
  7%|▋         | 8/108 [00:22<05:14,  3.15s/it][A
  8%|▊         | 9/108 [00:26<05:15,  3.19s/it][A
  9%|▉         | 10/108 [00:29<05:16,  3.23s/it][A
 10%|█         | 11/108 [00:32<05:15,  3.25s/it][A
 11%|█         | 12/108 [00:36<05:12,  3.26s/it][A
 12%|█▏        | 13/108 [00:39<05:09,  3.26s/it][A
 13%|█▎        | 14/108 [00:42<05:06,  3.26s/it][A
 14%|█▍        | 15/108 [00:45<05:02,  3.26s/it][A
 15%|█▍        | 16/108 [00:49<04:59,  3.25s/it][A
 16%|█▌        | 17/108 [00:52<04:56,  3.26s/it][A
 17%|█▋        | 18/108 [00:55<04:52,  3.25s/it][A
 18%|█▊        | 19/108 [00:58<04:49,  3.25s/it][A
 19%|█▊        | 20/108 [01:02<04:47,  3.27s/it][A
 19%|█▉        | 21/108 [01:05<04:45,  3.28s/it][A
 20%|██        | 22/108 [01:08<04:40,  3.27s/it][A
 21%|██▏       | 23/108 [01:11<04:38,  3.28s/it][A
 22%|██▏       | 24/108 [01:15<04:34,  3.27s/it][A
 23%|██▎       | 25/108 [01:18<04:30,  3.26s/it][A
 24%|██▍       | 26/108 [01:21<04:26,  3.25s/it][A
 25%|██▌       | 27/108 [01:24<04:23,  3.25s/it][A
 26%|██▌       | 28/108 [01:28<04:19,  3.25s/it][A
 27%|██▋       | 29/108 [01:31<04:17,  3.26s/it][A
 28%|██▊       | 30/108 [01:34<04:15,  3.27s/it][A
 29%|██▊       | 31/108 [01:38<04:11,  3.27s/it][A
 30%|██▉       | 32/108 [01:41<04:07,  3.26s/it][A
 31%|███       | 33/108 [01:44<04:05,  3.27s/it][A
 31%|███▏      | 34/108 [01:47<04:01,  3.27s/it][A
 32%|███▏      | 35/108 [01:51<03:58,  3.27s/it][A
 33%|███▎      | 36/108 [01:54<03:54,  3.25s/it][A
 34%|███▍      | 37/108 [01:57<03:51,  3.26s/it][A
 35%|███▌      | 38/108 [02:00<03:47,  3.25s/it][A
 36%|███▌      | 39/108 [02:04<03:45,  3.26s/it][A
 37%|███▋      | 40/108 [02:07<03:41,  3.26s/it][A
 38%|███▊      | 41/108 [02:10<03:38,  3.26s/it][A
 39%|███▉      | 42/108 [02:13<03:34,  3.25s/it][A
 40%|███▉      | 43/108 [02:17<03:31,  3.26s/it][A
 41%|████      | 44/108 [02:20<03:28,  3.26s/it][A
 42%|████▏     | 45/108 [02:23<03:26,  3.28s/it][A
 43%|████▎     | 46/108 [02:26<03:22,  3.27s/it][A
 44%|████▎     | 47/108 [02:30<03:19,  3.27s/it][A
 44%|████▍     | 48/108 [02:33<03:15,  3.26s/it][A
 45%|████▌     | 49/108 [02:36<03:11,  3.25s/it][A
 46%|████▋     | 50/108 [02:39<03:09,  3.26s/it][A
 47%|████▋     | 51/108 [02:43<03:06,  3.27s/it][A
 48%|████▊     | 52/108 [02:46<03:03,  3.27s/it][A
 49%|████▉     | 53/108 [02:49<02:59,  3.27s/it][A
 50%|█████     | 54/108 [02:53<02:57,  3.29s/it][A
 51%|█████     | 55/108 [02:56<02:53,  3.28s/it][A
 52%|█████▏    | 56/108 [02:59<02:50,  3.28s/it][A
 53%|█████▎    | 57/108 [03:02<02:46,  3.27s/it][A
 54%|█████▎    | 58/108 [03:06<02:43,  3.27s/it][A
 55%|█████▍    | 59/108 [03:09<02:40,  3.27s/it][A
 56%|█████▌    | 60/108 [03:12<02:37,  3.29s/it][A
 56%|█████▋    | 61/108 [03:16<02:34,  3.28s/it][A
 57%|█████▋    | 62/108 [03:19<02:30,  3.27s/it][A
 58%|█████▊    | 63/108 [03:22<02:26,  3.26s/it][A
 59%|█████▉    | 64/108 [03:25<02:24,  3.27s/it][A
 60%|██████    | 65/108 [03:29<02:20,  3.26s/it][A
 61%|██████    | 66/108 [03:32<02:17,  3.27s/it][A
 62%|██████▏   | 67/108 [03:35<02:14,  3.28s/it][A
 63%|██████▎   | 68/108 [03:38<02:10,  3.27s/it][A
 64%|██████▍   | 69/108 [03:42<02:07,  3.27s/it][A
 65%|██████▍   | 70/108 [03:45<02:04,  3.28s/it][A
 66%|██████▌   | 71/108 [03:48<02:00,  3.27s/it][A
 67%|██████▋   | 72/108 [03:52<01:57,  3.28s/it][A
 68%|██████▊   | 73/108 [03:55<01:54,  3.27s/it][A
 69%|██████▊   | 74/108 [03:58<01:51,  3.28s/it][A
 69%|██████▉   | 75/108 [04:01<01:47,  3.27s/it][A
 70%|███████   | 76/108 [04:05<01:44,  3.28s/it][A
 71%|███████▏  | 77/108 [04:08<01:41,  3.27s/it][A
 72%|███████▏  | 78/108 [04:11<01:38,  3.28s/it][A
 73%|███████▎  | 79/108 [04:14<01:35,  3.28s/it][A
 74%|███████▍  | 80/108 [04:18<01:31,  3.27s/it][A
 75%|███████▌  | 81/108 [04:21<01:28,  3.27s/it][A
 76%|███████▌  | 82/108 [04:24<01:25,  3.28s/it][A
 77%|███████▋  | 83/108 [04:28<01:21,  3.27s/it][A
 78%|███████▊  | 84/108 [04:31<01:18,  3.28s/it][A
 79%|███████▊  | 85/108 [04:34<01:15,  3.28s/it][A
 80%|███████▉  | 86/108 [04:37<01:12,  3.29s/it][A
 81%|████████  | 87/108 [04:41<01:08,  3.28s/it][A
 81%|████████▏ | 88/108 [04:44<01:05,  3.29s/it][A
 82%|████████▏ | 89/108 [04:47<01:02,  3.28s/it][A
 83%|████████▎ | 90/108 [04:51<00:59,  3.28s/it][A
 84%|████████▍ | 91/108 [04:54<00:55,  3.28s/it][A
 85%|████████▌ | 92/108 [04:57<00:52,  3.28s/it][A
 86%|████████▌ | 93/108 [05:00<00:49,  3.27s/it][A
 87%|████████▋ | 94/108 [05:04<00:45,  3.28s/it][A
 88%|████████▊ | 95/108 [05:07<00:42,  3.28s/it][A
 89%|████████▉ | 96/108 [05:10<00:39,  3.29s/it][A
 90%|████████▉ | 97/108 [05:14<00:36,  3.28s/it][A
 91%|█████████ | 98/108 [05:17<00:32,  3.28s/it][A
 92%|█████████▏| 99/108 [05:20<00:29,  3.27s/it][A
 93%|█████████▎| 100/108 [05:23<00:26,  3.27s/it][A
 94%|█████████▎| 101/108 [05:27<00:22,  3.27s/it][A
 94%|█████████▍| 102/108 [05:30<00:19,  3.28s/it][A
 95%|█████████▌| 103/108 [05:33<00:16,  3.27s/it][A
 96%|█████████▋| 104/108 [05:36<00:13,  3.29s/it][A
 97%|█████████▋| 105/108 [05:40<00:09,  3.27s/it][A
 98%|█████████▊| 106/108 [05:43<00:06,  3.29s/it][A
 99%|█████████▉| 107/108 [05:46<00:03,  3.28s/it][A
100%|██████████| 108/108 [05:50<00:00,  3.28s/it][A
                                                 [A                                                   {'eval_loss': 0.6400017738342285, 'eval_runtime': 353.4215, 'eval_samples_per_second': 2.139, 'eval_steps_per_second': 0.306, 'epoch': 3.0}

100%|██████████| 108/108 [05:50<00:00,  3.28s/it][A100%|██████████| 162/162 [2:08:10<00:00, 36.57s/it]
                                                 [A/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/storage.py:414: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(io.BytesIO(b))
                                                   {'train_runtime': 8165.9365, 'train_samples_per_second': 2.221, 'train_steps_per_second': 0.02, 'train_loss': 0.5859835589373553, 'epoch': 3.0}
100%|██████████| 162/162 [2:16:04<00:00, 36.57s/it]100%|██████████| 162/162 [2:16:04<00:00, 50.40s/it]
/root/anaconda3/envs/meditron/lib/python3.9/site-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:689: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
  warnings.warn(
[1;34mwandb[0m: 🚀 View run [33m./meditron_qa_results[0m at: [34mhttps://wandb.ai/l-zijie/huggingface/runs/l75rtry9[0m
[1;34mwandb[0m: Find logs at: [1;35mwandb/run-20241030_022934-l75rtry9/logs[0m
