  0%|          | 0/1144 [00:00<?, ?it/s]Traceback (most recent call last):
  File "/playpen/xinyu/jesse/dg_tunning/exp1/tune_mc/tune_umls.py", line 154, in <module>
    trainer.train()
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/trainer.py", line 2164, in train
    return inner_training_loop(
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/trainer.py", line 2522, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/trainer.py", line 3653, in training_step
    loss = self.compute_loss(model, inputs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/trainer.py", line 3709, in compute_loss
    outputs = model(**inputs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1643, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1459, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/peft/peft_model.py", line 1719, in forward
    return self.base_model(
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/peft/tuners/tuners_utils.py", line 197, in forward
    return self.model.forward(*args, **kwargs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/models/qwen2/modeling_qwen2.py", line 1184, in forward
    loss = self.loss_function(logits, labels, self.vocab_size, **loss_kwargs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/loss/loss_utils.py", line 46, in ForCausalLMLoss
    loss = fixed_cross_entropy(shift_logits, shift_labels, num_items_in_batch, ignore_index, **kwargs)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/loss/loss_utils.py", line 26, in fixed_cross_entropy
    loss = nn.functional.cross_entropy(source, target, ignore_index=ignore_index, reduction=reduction)
  File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/functional.py", line 3479, in cross_entropy
    return torch._C._nn.cross_entropy_loss(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.32 GiB. GPU 0 has a total capacity of 47.40 GiB of which 1.95 GiB is free. Including non-PyTorch memory, this process has 45.44 GiB memory in use. Of the allocated memory 44.19 GiB is allocated by PyTorch, and 609.68 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[rank0]: Traceback (most recent call last):
[rank0]:   File "/playpen/xinyu/jesse/dg_tunning/exp1/tune_mc/tune_umls.py", line 154, in <module>
[rank0]:     trainer.train()
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/trainer.py", line 2164, in train
[rank0]:     return inner_training_loop(
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/trainer.py", line 2522, in _inner_training_loop
[rank0]:     tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/trainer.py", line 3653, in training_step
[rank0]:     loss = self.compute_loss(model, inputs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/trainer.py", line 3709, in compute_loss
[rank0]:     outputs = model(**inputs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank0]:     return self._call_impl(*args, **kwargs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank0]:     return forward_call(*args, **kwargs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1643, in forward
[rank0]:     else self._run_ddp_forward(*inputs, **kwargs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/parallel/distributed.py", line 1459, in _run_ddp_forward
[rank0]:     return self.module(*inputs, **kwargs)  # type: ignore[index]
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank0]:     return self._call_impl(*args, **kwargs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank0]:     return forward_call(*args, **kwargs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/peft/peft_model.py", line 1719, in forward
[rank0]:     return self.base_model(
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
[rank0]:     return self._call_impl(*args, **kwargs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
[rank0]:     return forward_call(*args, **kwargs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/peft/tuners/tuners_utils.py", line 197, in forward
[rank0]:     return self.model.forward(*args, **kwargs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/models/qwen2/modeling_qwen2.py", line 1184, in forward
[rank0]:     loss = self.loss_function(logits, labels, self.vocab_size, **loss_kwargs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/loss/loss_utils.py", line 46, in ForCausalLMLoss
[rank0]:     loss = fixed_cross_entropy(shift_logits, shift_labels, num_items_in_batch, ignore_index, **kwargs)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/transformers/loss/loss_utils.py", line 26, in fixed_cross_entropy
[rank0]:     loss = nn.functional.cross_entropy(source, target, ignore_index=ignore_index, reduction=reduction)
[rank0]:   File "/home/xinyuzh/anaconda3/envs/meditron/lib/python3.10/site-packages/torch/nn/functional.py", line 3479, in cross_entropy
[rank0]:     return torch._C._nn.cross_entropy_loss(
[rank0]: torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.32 GiB. GPU 0 has a total capacity of 47.40 GiB of which 1.95 GiB is free. Including non-PyTorch memory, this process has 45.44 GiB memory in use. Of the allocated memory 44.19 GiB is allocated by PyTorch, and 609.68 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
